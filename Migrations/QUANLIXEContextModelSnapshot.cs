// <auto-generated />
using BanVeXe_Web.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace BanVeXe_Web.Migrations
{
    [DbContext(typeof(QUANLIXEContext))]
    partial class QUANLIXEContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.3-rtm-10026")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BanVeXe_Web.Models.Bus", b =>
                {
                    b.Property<string>("IdBus")
                        .HasColumnName("ID_BUS")
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.Property<string>("IdType")
                        .HasColumnName("ID_TYPE")
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.HasKey("IdBus")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("IdType")
                        .HasName("BUS_TYPEOFBUS_FK");

                    b.ToTable("BUS");
                });

            modelBuilder.Entity("BanVeXe_Web.Models.BuyService", b =>
                {
                    b.Property<string>("IdTicket")
                        .HasColumnName("ID_TICKET")
                        .HasMaxLength(10);

                    b.Property<string>("IdService")
                        .HasColumnName("ID_SERVICE")
                        .HasColumnType("char(5)");

                    b.Property<int?>("Amount")
                        .HasColumnName("AMOUNT");

                    b.HasKey("IdTicket", "IdService");

                    b.HasIndex("IdService")
                        .HasName("BUY_SERVICE2_FK");

                    b.HasIndex("IdTicket")
                        .HasName("BUY_SERVICE_FK");

                    b.ToTable("BUY_SERVICE");
                });

            modelBuilder.Entity("BanVeXe_Web.Models.Customer", b =>
                {
                    b.Property<string>("IdCus")
                        .HasColumnName("ID_CUS")
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.Property<string>("Address")
                        .HasColumnName("ADDRESS")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("Date")
                        .HasColumnName("DATE")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnName("NAME")
                        .HasMaxLength(30);

                    b.Property<string>("Phone")
                        .HasColumnName("PHONE")
                        .HasMaxLength(11)
                        .IsUnicode(false);

                    b.HasKey("IdCus")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("CUSTOMER");
                });

            modelBuilder.Entity("BanVeXe_Web.Models.Driver", b =>
                {
                    b.Property<string>("IdDriver")
                        .HasColumnName("ID_DRIVER")
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.Property<string>("Fullname")
                        .HasColumnName("FULLNAME")
                        .HasMaxLength(50);

                    b.HasKey("IdDriver")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("DRIVER");
                });

            modelBuilder.Entity("BanVeXe_Web.Models.Place", b =>
                {
                    b.Property<int>("IdPlace")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID_PLACE");

                    b.Property<string>("Placename")
                        .HasColumnName("PLACENAME")
                        .HasMaxLength(30);

                    b.HasKey("IdPlace")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("PLACE");
                });

            modelBuilder.Entity("BanVeXe_Web.Models.Route", b =>
                {
                    b.Property<int>("IdRoute")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID_ROUTE");

                    b.Property<int?>("IdDepacture")
                        .HasColumnName("ID_DEPACTURE");

                    b.Property<int?>("IdDestination")
                        .HasColumnName("ID_DESTINATION");

                    b.HasKey("IdRoute")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("IdDepacture")
                        .HasName("ROUTE_PLACE_FK");

                    b.HasIndex("IdDestination")
                        .HasName("PK_ROUTE_PLACE_FK");

                    b.ToTable("ROUTE");
                });

            modelBuilder.Entity("BanVeXe_Web.Models.Service", b =>
                {
                    b.Property<string>("IdService")
                        .HasColumnName("ID_SERVICE")
                        .HasColumnType("char(5)");

                    b.Property<string>("Explanation")
                        .HasColumnName("EXPLANATION")
                        .HasMaxLength(300);

                    b.Property<decimal?>("Price")
                        .HasColumnName("PRICE")
                        .HasColumnType("numeric(15, 0)");

                    b.Property<string>("Servicename")
                        .HasColumnName("SERVICENAME")
                        .HasMaxLength(50);

                    b.HasKey("IdService")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("SERVICE");
                });

            modelBuilder.Entity("BanVeXe_Web.Models.Shedule", b =>
                {
                    b.Property<string>("IdShdule")
                        .HasColumnName("ID_SHDULE")
                        .HasMaxLength(11);

                    b.Property<DateTime?>("End")
                        .HasColumnName("END")
                        .HasColumnType("datetime");

                    b.Property<string>("IdBus")
                        .HasColumnName("ID_BUS")
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.Property<string>("IdDriver")
                        .HasColumnName("ID_DRIVER")
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.Property<int?>("IdRoute")
                        .HasColumnName("ID_ROUTE");

                    b.Property<string>("IdTicket")
                        .HasColumnName("ID_TICKET")
                        .HasMaxLength(10);

                    b.Property<DateTime?>("Start")
                        .HasColumnName("START")
                        .HasColumnType("datetime");

                    b.HasKey("IdShdule")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("IdBus")
                        .HasName("SHEDULE_BUS_FK");

                    b.HasIndex("IdDriver")
                        .HasName("SHEDULE_DRIVER_FK");

                    b.HasIndex("IdRoute")
                        .HasName("SHEDULE_ROUTE_FK");

                    b.HasIndex("IdTicket")
                        .HasName("SHEDULE_TICKET_FK");

                    b.ToTable("SHEDULE");
                });

            modelBuilder.Entity("BanVeXe_Web.Models.Ticket", b =>
                {
                    b.Property<string>("IdTicket")
                        .HasColumnName("ID_TICKET")
                        .HasMaxLength(10);

                    b.Property<string>("IdCus")
                        .HasColumnName("ID_CUS")
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.HasKey("IdTicket")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("IdCus")
                        .HasName("TICKET_CUSTOMER_FK");

                    b.ToTable("TICKET");
                });

            modelBuilder.Entity("BanVeXe_Web.Models.TypeBus", b =>
                {
                    b.Property<string>("IdType")
                        .HasColumnName("ID_TYPE")
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.Property<string>("Typename")
                        .HasColumnName("TYPENAME")
                        .HasMaxLength(20);

                    b.HasKey("IdType")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("TYPE_BUS");
                });

            modelBuilder.Entity("BanVeXe_Web.Models.VariableSeat", b =>
                {
                    b.Property<string>("IdSeat")
                        .HasColumnName("ID_SEAT")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("IdBus")
                        .HasColumnName("ID_BUS")
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.HasKey("IdSeat")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("IdBus")
                        .HasName("SEAT_BUS_FK");

                    b.ToTable("VARIABLE_SEAT");
                });

            modelBuilder.Entity("BanVeXe_Web.Models.Bus", b =>
                {
                    b.HasOne("BanVeXe_Web.Models.TypeBus", "IdTypeNavigation")
                        .WithMany("Bus")
                        .HasForeignKey("IdType")
                        .HasConstraintName("FK_BUS_BUS_TYPEO_TYPE_BUS");
                });

            modelBuilder.Entity("BanVeXe_Web.Models.BuyService", b =>
                {
                    b.HasOne("BanVeXe_Web.Models.Service", "IdServiceNavigation")
                        .WithMany("BuyService")
                        .HasForeignKey("IdService")
                        .HasConstraintName("FK_BUY_SERV_BUY_SERVI_SERVICE");

                    b.HasOne("BanVeXe_Web.Models.Ticket", "IdTicketNavigation")
                        .WithMany("BuyService")
                        .HasForeignKey("IdTicket")
                        .HasConstraintName("FK_BUY_SERV_BUY_SERVI_TICKET");
                });

            modelBuilder.Entity("BanVeXe_Web.Models.Route", b =>
                {
                    b.HasOne("BanVeXe_Web.Models.Place", "IdDepactureNavigation")
                        .WithMany("RouteIdDepactureNavigation")
                        .HasForeignKey("IdDepacture")
                        .HasConstraintName("FK_ROUTE_ROUTE_PLA_PLACE");

                    b.HasOne("BanVeXe_Web.Models.Place", "IdDestinationNavigation")
                        .WithMany("RouteIdDestinationNavigation")
                        .HasForeignKey("IdDestination")
                        .HasConstraintName("FK_ROUTE_PK_ROUTE__PLACE");
                });

            modelBuilder.Entity("BanVeXe_Web.Models.Shedule", b =>
                {
                    b.HasOne("BanVeXe_Web.Models.Bus", "IdBusNavigation")
                        .WithMany("Shedule")
                        .HasForeignKey("IdBus")
                        .HasConstraintName("FK_SHEDULE_SHEDULE_B_BUS");

                    b.HasOne("BanVeXe_Web.Models.Driver", "IdDriverNavigation")
                        .WithMany("Shedule")
                        .HasForeignKey("IdDriver")
                        .HasConstraintName("FK_SHEDULE_SHEDULE_D_DRIVER");

                    b.HasOne("BanVeXe_Web.Models.Route", "IdRouteNavigation")
                        .WithMany("Shedule")
                        .HasForeignKey("IdRoute")
                        .HasConstraintName("FK_SHEDULE_SHEDULE_R_ROUTE");

                    b.HasOne("BanVeXe_Web.Models.Ticket", "IdTicketNavigation")
                        .WithMany("Shedule")
                        .HasForeignKey("IdTicket")
                        .HasConstraintName("FK_SHEDULE_SHEDULE_T_TICKET");
                });

            modelBuilder.Entity("BanVeXe_Web.Models.Ticket", b =>
                {
                    b.HasOne("BanVeXe_Web.Models.Customer", "IdCusNavigation")
                        .WithMany("Ticket")
                        .HasForeignKey("IdCus")
                        .HasConstraintName("FK_TICKET_TICKET_CU_CUSTOMER");
                });

            modelBuilder.Entity("BanVeXe_Web.Models.VariableSeat", b =>
                {
                    b.HasOne("BanVeXe_Web.Models.Bus", "IdBusNavigation")
                        .WithMany("VariableSeat")
                        .HasForeignKey("IdBus")
                        .HasConstraintName("FK_VARIABLE_SEAT_BUS_BUS");
                });
#pragma warning restore 612, 618
        }
    }
}
